@page "/"
@using System.IO;
@using Blazor.FileReader;
@using Microsoft.AspNetCore.WebUtilities;
@inject NavigationManager navigationManager;
@inject HttpClient Http;
@inject IFileReaderService fileReaderService;

<h5>Reaper CSV Import</h5>

@if (!hideConsoleAddress || !string.IsNullOrEmpty(connectionError))
{
    <div class="alert alert-@(playbacks != null ? "success" : "primary")">

        <div class="form-group">
            <label for="ipAddress">Console IP Address:</label>
            <div class="input-group" id="ipAddress">
                <input type="text" @bind="consoleAddress" />
                <button class="btn btn-primary" @onclick="@(()=> Connect())">Connect</button>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(connectionError))
        {
            <div class="alert alert-danger">
                @connectionError
            </div>
        }
    </div>
}




    @if (playbacks != null)
    {
        <div class="alert alert-@(csvLines.Count() > 0 ? "success":"primary")">
            <label for="reaperFile">Please select the reaper CSV to import:</label>
            <div class="input-group mb-3" id="reaperFile">
                <input type="file" @ref="@inputTypeFileElement" />
                <button class="btn btn-primary mb3" @onclick="@ReadFile">Load</button>
            </div>
        </div>

        @if (csvLines.Count() > 0)
        {
            <div class="alert alert-@(importError == string.Empty ? "success":"primary")">
                <label for="reaperFile">Please select the cue list to apply the timecode to:</label>
                <div class="input-group mb-3">
                    <select class="form-control" @bind="selectedPlaybackId">
                        <option value="" selected disabled hidden>--- Choose Cue List ---</option>
                        @foreach (var playback in playbacks.Where(playback => playback.type == "cueListHandle"))
                        {
                            <option value="@playback.titanId">@playback.Legend</option>
                        }
                    </select>
                    <button class="btn btn-secondary ml-3" @onclick="@(()=> Connect(true))">Refresh</button>
                    <button class="btn btn-primary ml-3" @onclick="@Import">Import</button>
                </div>
                @if (!string.IsNullOrEmpty(importError))
                {
                    <div class="alert alert-danger">
                        @importError
                    </div>
                }
            </div>

            <table class="table">
                <tr>
                    <th>Cue</th>
                    <th>Legend</th>
                    <th>Timecode</th>
                </tr>
                @foreach (var cue in csvLines)
                {
                    <tr>
                        <td>@cue.Id</td>
                        <td>@cue.Name</td>
                        <td>@cue.Timecode</td>
                    </tr>
                }
            </table>
        }
    }

    @code {
        ElementReference inputTypeFileElement;

        string consoleAddress = "localhost";
        bool hideConsoleAddress = false;

        List<ReaperCue> csvLines = new List<ReaperCue>();
        Handle[] playbacks = null;
        int selectedPlaybackId = 0;
        string connectionError = string.Empty;

        protected string FormatApiRequest(string scriptUrl)
        {
            if (consoleAddress.Contains(":"))
            {
                return $"http://{consoleAddress}/titan/{scriptUrl}";
            }
            else
            {
                return $"http://{consoleAddress}:4430/titan/{scriptUrl}";
            }

        }

        protected override async Task OnInitializedAsync()
        {
            var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri); //you can use IURIHelper for older versions

            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("apiUrl", out var url))
            {
                consoleAddress = url;
                hideConsoleAddress = true;
            }

            Connect(true);
        }

        public async Task Connect(bool silent = false)
        {
            try
            {
                playbacks = await Http.GetJsonAsync<Handle[]>(FormatApiRequest("handles/Playbacks"));
            }
            catch (Exception ex)
            {
                if(!silent)
                    connectionError = $"Unable to connect to Titan console at address '{consoleAddress}'.";
            }

            StateHasChanged();
        }

        public async Task ReadFile()
        {
            csvLines.Clear();
            foreach (var file in await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync())
            {
                // Read into buffer and act (uses less memory)
                using (StreamReader stream = new StreamReader(await file.OpenReadAsync()))
                {
                    //Ignore Header
                    await stream.ReadLineAsync();

                    string line;
                    while (!string.IsNullOrEmpty(line = await stream.ReadLineAsync()))
                    {
                        string[] csvParts = line.Split(',');

                        var cue = new ReaperCue()
                        {
                            Id = csvParts[0],
                            Name = csvParts[1],
                            Timecode = FormatTimecode(csvParts[2])
                        };

                        if (csvParts.Length > 3)
                            cue.Colour = csvParts[3];

                        csvLines.Add(cue);
                    }


                }
            }
        }

        private string FormatTimecode(string time)
        {
            List<string> timecodeParts = time.Split(new char[] { ':', '.' }).ToList();
            if (timecodeParts.Count == 3)
            {
                timecodeParts.Insert(0, "0");
            }

            return string.Join(":", timecodeParts.ToArray());
        }


        private string importError = null;

        public async Task Import()
        {
            try
            {
                foreach (var cue in csvLines)
                {
                    int cueNumber = int.Parse(cue.Id.Trim('M'));

                    if (!await Http.GetJsonAsync<bool>(FormatApiRequest($"script/2/Playbacks/DoesCueExist?handle_titanId={selectedPlaybackId}&cueNumber={cueNumber}")))
                    {
                        await Http.GetAsync(FormatApiRequest($"script/2/Playbacks/AppendOrInsertPlaybackCue?handle_titanId={selectedPlaybackId}&cueNumber={cueNumber}"));
                    }


                    await Http.GetAsync(FormatApiRequest($"script/2/Playbacks/SetCueLegend?handle_titanId={selectedPlaybackId}&cueNumber={cueNumber}&newLegend={cue.Name}"));
                    await Http.GetAsync(FormatApiRequest($"script/2/Timecode/SetCueTimecodeWithCueNumber?handle_titanId={selectedPlaybackId}&cueNumber={cueNumber}&time={cue.Timecode}"));
                }
                importError = string.Empty;
            }
            catch (Exception ex)
            {
                importError = ex.Message;
            }
        }

        class ReaperCue
        {
            public string Id { get; set; }

            public string Name { get; set; }

            public string Timecode { get; set; }

            public string Colour { get; set; }
        }

        class Handle
        {
            public int titanId { get; set; }
            public string type { get; set; }
            public string Legend { get; set; }

        }



    }

